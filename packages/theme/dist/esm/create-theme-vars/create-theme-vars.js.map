{"version":3,"file":"create-theme-vars.js","names":["walkObject","cssVar","createThemeVars","target","options","context","cssVars","cssMap","value","path","_tokenHandlerMap$firs","firstKey","handler","tokenHandlerMap","defaultHandler","Object","assign","keys","lookupKey","join","varKey","variable","reference","undefined","cssVarPrefix","var","varRef"],"sources":["../../../src/create-theme-vars/create-theme-vars.ts"],"sourcesContent":["import { Dict, walkObject } from '@shtcut-ui/utils';\nimport { ThemeScale } from './theme-tokens';\nimport { cssVar } from './css-var';\n\nexport interface CreateThemeVarsOptions {\n  cssVarPrefix?: string;\n}\n\nexport interface ThemeVars {\n  cssVars: Dict;\n  cssMap: Dict;\n}\n\n/**\n * The `createThemeVars` function takes a target object and options, and returns a context object\n * containing CSS variables and a CSS map.\n * @param {Dict} target - The `target` parameter is an object that contains the theme variables that\n * you want to create. It can be any JavaScript object that represents the theme variables.\n * @param {CreateThemeVarsOptions} options - The `options` parameter is an object that contains\n * additional configuration options for creating theme variables. It is of type\n * `CreateThemeVarsOptions`.\n * @returns The function `createThemeVars` returns an object of type `ThemeVars`.\n */\nexport const createThemeVars = (target: Dict, options: CreateThemeVarsOptions) => {\n  const context: ThemeVars = {\n    cssVars: {},\n    cssMap: {},\n  };\n\n  walkObject(target, (value, path) => {\n    const [firstKey] = path;\n\n    // @ts-ignore\n    const handler = tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler;\n\n    const { cssVars, cssMap } = handler(path, value, options);\n    Object.assign(context.cssVars, cssVars);\n    Object.assign(context.cssMap, cssMap);\n  });\n  return context;\n};\n\ntype TokenHandler = (\n  keys: string[],\n  value: unknown | { reference: string },\n  options: CreateThemeVarsOptions,\n) => ThemeVars;\n\n/* The `tokenHandlerMap` is an object that maps different keys (of type `ThemeScale`) to corresponding\nhandler functions. Each handler function takes in `keys`, `value`, and `options` as parameters and\nreturns an object with `cssVars` and `cssMap` properties. */\nconst tokenHandlerMap: Partial<Record<ThemeScale, TokenHandler>> & {\n  defaultHandler: TokenHandler;\n} = {\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join('.');\n    const varKey = keys.join('-');\n\n    const { variable, reference } = cssVar(varKey, undefined, options.cssVarPrefix);\n\n    return {\n      cssVars: {\n        [variable]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: variable,\n          varRef: reference,\n        },\n      },\n    };\n  },\n};\n"],"mappings":"AAAA,SAAeA,UAAU,QAAQ,kBAAkB;AAEnD,SAASC,MAAM,QAAQ,WAAW;AAWlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,eAAe,GAAGA,CAACC,MAAY,EAAEC,OAA+B,KAAK;EAChF,IAAMC,OAAkB,GAAG;IACzBC,OAAO,EAAE,CAAC,CAAC;IACXC,MAAM,EAAE,CAAC;EACX,CAAC;EAEDP,UAAU,CAACG,MAAM,EAAE,CAACK,KAAK,EAAEC,IAAI,KAAK;IAAA,IAAAC,qBAAA;IAClC,IAAM,CAACC,QAAQ,CAAC,GAAGF,IAAI;;IAEvB;IACA,IAAMG,OAAO,IAAAF,qBAAA,GAAGG,eAAe,CAACF,QAAQ,CAAC,YAAAD,qBAAA,GAAIG,eAAe,CAACC,cAAc;IAE3E,IAAM;MAAER,OAAO;MAAEC;IAAO,CAAC,GAAGK,OAAO,CAACH,IAAI,EAAED,KAAK,EAAEJ,OAAO,CAAC;IACzDW,MAAM,CAACC,MAAM,CAACX,OAAO,CAACC,OAAO,EAAEA,OAAO,CAAC;IACvCS,MAAM,CAACC,MAAM,CAACX,OAAO,CAACE,MAAM,EAAEA,MAAM,CAAC;EACvC,CAAC,CAAC;EACF,OAAOF,OAAO;AAChB,CAAC;AAQD;AACA;AACA;AACA,IAAMQ,eAEL,GAAG;EACFC,cAAc,EAAEA,CAACG,IAAI,EAAET,KAAK,EAAEJ,OAAO,KAAK;IACxC,IAAMc,SAAS,GAAGD,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC;IAChC,IAAMC,MAAM,GAAGH,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC;IAE7B,IAAM;MAAEE,QAAQ;MAAEC;IAAU,CAAC,GAAGrB,MAAM,CAACmB,MAAM,EAAEG,SAAS,EAAEnB,OAAO,CAACoB,YAAY,CAAC;IAE/E,OAAO;MACLlB,OAAO,EAAE;QACP,CAACe,QAAQ,GAAGb;MACd,CAAC;MACDD,MAAM,EAAE;QACN,CAACW,SAAS,GAAG;UACXV,KAAK;UACLiB,GAAG,EAAEJ,QAAQ;UACbK,MAAM,EAAEJ;QACV;MACF;IACF,CAAC;EACH;AACF,CAAC"}