{"version":3,"file":"calc.js","names":["isObject","resolveReference","operand","reference","String","toExpression","operator","_len","arguments","length","operands","Array","_key","map","join","replace","add","_len2","_key2","subtract","_len3","_key3","multiply","_len4","_key4","divide","_len5","_key5","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","toString"],"sources":["../../../src/create-theme-vars/calc.ts"],"sourcesContent":["import { isObject } from '@shtcut-ui/utils';\n\nexport type Operand = string | number | { reference: string };\n\ntype Operator = '+' | '-' | '*' | '/';\n\n/**\n * The function `resolveReference` takes an `operand` and returns its reference if it is an object with\n * a reference property, otherwise it returns the operand as a string.\n * @param {Operand} operand - The `operand` parameter is of type `Operand`.\n * @returns a string.\n */\nexport const resolveReference = (operand: Operand): string => {\n  return isObject(operand) && operand.reference ? operand.reference : String(operand);\n};\n\n/**\n * The `toExpression` function takes an operator and a list of operands, resolves any references in the\n * operands, joins them with the operator, and removes any occurrences of \"/calc/g\" in the resulting\n * expression.\n * @param {Operator} operator - The `operator` parameter is a variable of type `Operator`. It\n * represents the mathematical operator that will be used in the expression. Examples of operators\n * could be `+`, `-`, `*`, `/`, etc.\n * @param operands - An array of operands, which can be numbers or references to other values.\n */\nconst toExpression = (operator: Operator, ...operands: Array<Operand>) =>\n  operands.map(resolveReference).join(` ${operator} `).replace('/calc/g', '');\n\n/**\n * The function `add` takes in multiple operands and returns a string representing the addition\n * operation.\n * @param {Operand[]} operands - The `operands` parameter is a rest parameter that allows you to pass\n * in any number of `Operand` objects. The `Operand` type is not defined in the code snippet you\n * provided, so I cannot provide specific information about its structure. However, based on the usage\n * in the code, it can\n */\nconst add = (...operands: Operand[]) => `calc(${toExpression('+', ...operands)})`;\n\n/**\n * The function subtract takes in multiple operands and returns a string representing the subtraction\n * operation.\n * @param {Operand[]} operands - An array of operands.\n */\nconst subtract = (...operands: Operand[]) => `calc(${toExpression('-', ...operands)})`;\n\n/**\n * The `multiply` function takes in multiple operands and returns a string representing the\n * multiplication operation.\n * @param {Operand[]} operands - An array of operands.\n */\nconst multiply = (...operands: Operand[]) => `calc(${toExpression('*', ...operands)})`;\n\n/**\n * The `divide` function takes in multiple operands and returns a string representing the division\n * operation.\n * @param {Operand[]} operands - An array of operands. Each operand can be a number or a string\n * representing a number.\n */\nconst divide = (...operands: Operand[]) => `calc(${toExpression('/', ...operands)})`;\n\n/**\n * The `negate` function takes an operand and returns its negated value, either by changing the sign or\n * multiplying it by -1.\n * @param {Operand} x - Operand\n * @returns The function `negate` returns the negated value of the input `x`. If the input `x` is a\n * valid number, it returns the negated value as a string. If the input `x` is not a valid number, it\n * returns the result of multiplying `x` by -1.\n */\nconst negate = (x: Operand) => {\n  const value = resolveReference(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value.startsWith('-')) ? String(value).slice(1) : `-${value}`;\n  }\n  return multiply(value, -1);\n};\n\ninterface CalcChain {\n  add: (...operand: Array<Operand>) => CalcChain;\n  subtract: (...operand: Array<Operand>) => CalcChain;\n  multiply: (...operand: Array<Operand>) => CalcChain;\n  divide: (...operand: Array<Operand>) => CalcChain;\n  negate: (...operand: Array<Operand>) => CalcChain;\n  toString: () => string;\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: (...operands) => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n);\n"],"mappings":"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"}