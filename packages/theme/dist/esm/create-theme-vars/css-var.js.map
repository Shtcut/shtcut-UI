{"version":3,"file":"css-var.js","names":["replaceWhiteSpace","value","replaceValue","replace","escape","strValue","toString","includes","isDecimal","Number","isInteger","parseFloat","addPrefix","prefix","filter","Boolean","join","toVarReference","name","fallback","toVarDefinition","cssVar","cssVarPrefix","cssVariable","variable","reference"],"sources":["../../../src/create-theme-vars/css-var.ts"],"sourcesContent":["/**\n * The function replaces all white spaces in a string with a specified replace value.\n * @param {string} value - The `value` parameter is a string that represents the input value that you\n * want to replace the white spaces in.\n * @param [replaceValue=-] - The `replaceValue` parameter is an optional parameter that specifies the\n * value to replace the white space with. If no value is provided, it defaults to '-' (hyphen).\n * @returns The function `replaceWhiteSpace` returns a string with all whitespace characters replaced\n * by the `replaceValue` parameter. If no `replaceValue` is provided, it defaults to '-' as the\n * replacement.\n */\nconst replaceWhiteSpace = (value: string, replaceValue = '-') => {\n  return value.replace(/\\s+/g, replaceValue);\n};\n\n/**\n * The function \"escape\" takes a string or number as input and returns the input with any whitespace\n * replaced, and if the input is a decimal number, it replaces the decimal point with a backslash\n * followed by a period.\n * @param {string | number} value - The `value` parameter can be either a string or a number.\n * @returns either the modified string value with escaped decimal point if the input is a decimal\n * number, or the original value if it is an integer or a string.\n */\nfunction escape(value: string | number) {\n  const strValue = replaceWhiteSpace(value.toString());\n  if (strValue.includes('\\\\.')) return false;\n\n  const isDecimal = !Number.isInteger(parseFloat(value.toString()));\n  return isDecimal ? strValue.replace('.', `\\\\.`) : value;\n}\n\n/**\n * The addPrefix function takes a string value and an optional prefix, and returns the value with the\n * prefix added, separated by a hyphen.\n * @param {string} value - The `value` parameter is a string that represents the value to which the\n * prefix will be added.\n * @param [prefix] - The `prefix` parameter is an optional parameter that specifies a string to be\n * added as a prefix to the `value` parameter. If no `prefix` is provided, it defaults to an empty\n * string.\n * @returns The function `addPrefix` returns a string that is the concatenation of the `prefix`, the\n * escaped `value`, and a hyphen (\"-\").\n */\nexport const addPrefix = (value: string, prefix = '') => {\n  return [prefix, escape(value)].filter(Boolean).join('-');\n};\n\n/**\n * The function `toVarReference` returns a CSS variable reference string with an optional fallback\n * value.\n * @param {string} name - The `name` parameter is a string that represents the name of the variable\n * reference.\n * @param {string} [fallback] - The `fallback` parameter is an optional parameter that specifies a\n * default value to use if the variable reference is not defined. If `fallback` is provided, it will be\n * appended to the variable reference using a comma separator.\n * @returns The function `toVarReference` returns a string that represents a CSS variable reference.\n * The returned string is constructed using the `name` parameter as the variable name, and the\n * `fallback` parameter (if provided) as the fallback value. The `escape` function is used to escape\n * the variable name before constructing the final string.\n */\nexport const toVarReference = (name: string, fallback?: string) => {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : ''})`;\n};\n\n/**\n * The function `toVarDefinition` returns a variable definition string with an optional prefix.\n * @param {string} value - The `value` parameter is a string that represents the value you want to\n * convert to a variable definition.\n * @param [prefix] - The `prefix` parameter is an optional parameter that specifies a prefix to be\n * added to the `value` parameter. If no prefix is provided, it defaults to an empty string.\n * @returns a string that starts with \"--\" followed by the value with the prefix added.\n */\nexport const toVarDefinition = (value: string, prefix = '') => {\n  return `--${addPrefix(value, prefix)}`;\n};\n\n/**\n * The `cssVar` function returns an object with a CSS variable definition and a reference to that\n * variable.\n * @param {string} name - The `name` parameter is a string that represents the name of the CSS\n * variable. It is used to define and reference the CSS variable.\n * @param {string} [fallback] - The `fallback` parameter is an optional string that specifies a\n * fallback value for the CSS variable. If the CSS variable is not defined or supported, the fallback\n * value will be used instead.\n * @param {string} [cssVarPrefix] - The `cssVarPrefix` parameter is an optional prefix that can be\n * added to the CSS variable name. It is used to avoid naming conflicts with other CSS variables.\n * @returns An object is being returned with two properties: \"variable\" and \"reference\".\n */\nexport const cssVar = (name: string, fallback?: string, cssVarPrefix?: string) => {\n  const cssVariable = toVarDefinition(name, cssVarPrefix);\n  return {\n    variable: cssVariable,\n    reference: toVarReference(cssVariable, fallback),\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAa,EAAEC,YAAY,EAAW;EAAA,IAAvBA,YAAY;IAAZA,YAAY,GAAG,GAAG;EAAA;EAC1D,OAAOD,KAAK,CAACE,OAAO,CAAC,MAAM,EAAED,YAAY,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAACH,KAAsB,EAAE;EACtC,IAAMI,QAAQ,GAAGL,iBAAiB,CAACC,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;EACpD,IAAID,QAAQ,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK;EAE1C,IAAMC,SAAS,GAAG,CAACC,MAAM,CAACC,SAAS,CAACC,UAAU,CAACV,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjE,OAAOE,SAAS,GAAGH,QAAQ,CAACF,OAAO,CAAC,GAAG,OAAO,CAAC,GAAGF,KAAK;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMW,SAAS,GAAG,SAAZA,SAASA,CAAIX,KAAa,EAAEY,MAAM,EAAU;EAAA,IAAhBA,MAAM;IAANA,MAAM,GAAG,EAAE;EAAA;EAClD,OAAO,CAACA,MAAM,EAAET,MAAM,CAACH,KAAK,CAAC,CAAC,CAACa,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAGA,CAACC,IAAY,EAAEC,QAAiB,KAAK;EACjE,gBAAcf,MAAM,CAACc,IAAI,CAAC,IAAGC,QAAQ,UAAQA,QAAQ,GAAK,EAAE;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAInB,KAAa,EAAEY,MAAM,EAAU;EAAA,IAAhBA,MAAM;IAANA,MAAM,GAAG,EAAE;EAAA;EACxD,cAAYD,SAAS,CAACX,KAAK,EAAEY,MAAM,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMQ,MAAM,GAAGA,CAACH,IAAY,EAAEC,QAAiB,EAAEG,YAAqB,KAAK;EAChF,IAAMC,WAAW,GAAGH,eAAe,CAACF,IAAI,EAAEI,YAAY,CAAC;EACvD,OAAO;IACLE,QAAQ,EAAED,WAAW;IACrBE,SAAS,EAAER,cAAc,CAACM,WAAW,EAAEJ,QAAQ;EACjD,CAAC;AACH,CAAC"}