{"version":3,"file":"index.js","names":["colorString","hslToRgb","h","s","l","chroma","Math","abs","x","m","r","g","b","round","hwbToRgb","w","rgb","i","c","regexColor","regex","color","test","toRGBA","_colorString$get","colorType","hsla","rgba","colorTuple","get","hsl","startsWith","hwb","value","toRGB","_toRGBA","slice","toColor","colorStr","join","opacity","toString"],"sources":["../../../src/color/index.ts"],"sourcesContent":["import colorString from 'color-string';\nimport type { Color } from 'color-string';\n\n/**\n * The function `hslToRgb` converts a color from HSL (Hue, Saturation, Lightness) format to RGB (Red,\n * Green, Blue) format.\n * @param {number} h - The parameter `h` represents the hue value of the HSL color. It ranges from 0 to\n * 360, where 0 represents red, 120 represents green, and 240 represents blue.\n * @param {number} s - The parameter `s` in the `hslToRgb` function represents the saturation of the\n * color. Saturation determines the intensity or purity of the color. A saturation value of 0 means the\n * color is completely gray, while a saturation value of 100 means the color is fully saturated and\n * vibrant\n * @param {number} l - The parameter \"l\" in the hslToRgb function represents the lightness value of the\n * HSL color. It ranges from 0 to 100, where 0 represents black and 100 represents white.\n * @returns The function `hslToRgb` returns an array of three numbers representing the RGB values of\n * the corresponding HSL color. The array contains the red, green, and blue values in that order.\n */\nexport function hslToRgb(h: number, s: number, l: number): [number, number, number] {\n  s /= 100;\n  l /= 100;\n\n  if (h >= 360) {\n    h %= 360;\n  }\n\n  const chroma = (1 - Math.abs(2 * l - 1)) * s;\n  const x = chroma * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - chroma / 2;\n\n  let r, g, b;\n\n  switch (true) {\n    case h < 60:\n      r = chroma;\n      g = x;\n      b = 0;\n      break;\n    case h < 120:\n      r = x;\n      g = chroma;\n      b = 0;\n      break;\n    case h < 180:\n      r = 0;\n      g = chroma;\n      b = x;\n      break;\n    case h < 240:\n      r = 0;\n      g = x;\n      b = chroma;\n      break;\n    case h < 300:\n      r = x;\n      g = 0;\n      b = chroma;\n      break;\n    default:\n      r = chroma;\n      g = 0;\n      b = x;\n  }\n\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n\n  return [r, g, b];\n}\n\n/**\n * The function converts a color from HWB (Hue, Whiteness, Blackness) color space to RGB (Red, Green,\n * Blue) color space.\n * @param {number} h - The parameter `h` represents the hue value, which determines the color tone. It\n * is a number between 0 and 360, where 0 represents red, 120 represents green, and 240 represents\n * blue.\n * @param {number} w - The parameter `w` represents the whiteness value in the HWB color model. It\n * determines the amount of white added to the color. A value of 0 means no white added, while a value\n * of 100 means maximum white added.\n * @param {number} b - The parameter \"b\" in the above code represents the blackness component of the\n * HWB (Hue-Whiteness-Blackness) color model. It determines the amount of black added to the color. A\n * value of 0 represents no blackness (fully saturated color), while a value\n * @returns an array of three numbers representing the RGB values of a color.\n */\nexport function hwbToRgb(h: number, w: number, b: number): [number, number, number] {\n  const rgb = hslToRgb(h, 100, 50);\n\n  for (let i = 0; i < 3; ++i) {\n    let c = rgb[i] / 255;\n\n    c *= 1 - w / 100 - b / 100;\n    c += w / 100;\n\n    rgb[i] = Math.round(c * 255);\n  }\n  return rgb;\n}\n\n/**\n * The function `regexColor` tests if a given regular expression matches a given color string.\n * @param {RegExp} regex - A regular expression that will be used to test the color string.\n * @param {string} color - The `color` parameter is a string that represents a color value.\n */\nexport const regexColor = (regex: RegExp, color: string) => regex.test(color);\n\n/**\n * The `toRGBA` function converts a color string in various formats (hsla, rgba, hwb) to an RGBA color\n * value.\n * @param {string} color - The `color` parameter is a string representing a color value. It can be in\n * various formats such as `rgb()`, `rgba()`, `hsl()`, `hsla()`, or named colors like `\"red\"`,\n * `\"blue\"`, etc.\n * @returns a Color object or undefined.\n */\nexport function toRGBA(color: string): Color | undefined {\n  const colorType = {\n    hsla: /^hsla?/,\n    rgba: /^rgba?/,\n  };\n  if (regexColor(colorType.hsla, color)) {\n    const colorTuple = colorString.get.hsl(color);\n    if (!colorTuple) return;\n    return [...hslToRgb(colorTuple[0], colorTuple[1], colorTuple[2]), colorTuple[3]];\n  } else if (regexColor(colorType.rgba, color)) {\n    const colorTuple = colorString.get.rgb(color);\n    if (!colorTuple) return;\n    return colorTuple;\n  } else if (color.startsWith('hwb')) {\n    const colorTuple = colorString.get.hwb(color);\n    if (!colorTuple) return;\n    return [...hwbToRgb(colorTuple[0], colorTuple[1], colorTuple[2]), colorTuple[3]];\n  }\n  return colorString.get(color)?.value;\n}\n\n/**\n * The function \"toRGB\" takes a color string as input and returns an array of RGB values or undefined\n * if the input is invalid.\n * @param {string} color - A string representing a color in any valid CSS color format.\n * @returns an array of numbers representing the RGB values of the given color.\n */\nexport function toRGB(color: string): number[] | undefined {\n  return toRGBA(color)?.slice(0, 3);\n}\n\n/**\n * The function `toColor` takes a color string and returns an object with the color in RGB format and the\n * opacity as a string.\n * @param {string} colorStr - The `colorStr` parameter is a string representing a color value. It can\n * be in various formats such as hex code (#RRGGBB), RGB value (rgb(r, g, b)), or RGBA value (rgba(r,\n * g, b, a)).\n * @returns An object with two properties: \"color\" and \"opacity\".\n */\nexport function toColor(colorStr: string): { color: string; opacity: string } {\n  const rgba = toRGBA(colorStr);\n  const color = rgba ? rgba.slice(0, 3).join(', ') : colorStr;\n  const opacity = rgba ? rgba[3].toString() : '1';\n\n  return { color, opacity };\n}\n"],"mappings":"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"}