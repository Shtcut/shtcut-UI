{"version":3,"file":"index.js","names":[],"sources":["../../../src/types/index.ts"],"sourcesContent":["export type Dict<T = any> = Record<string, T>;\n\nexport type Booleanish = boolean | 'true' | 'false';\n\nexport type Merge<T, P> = P & Omit<T, keyof P>;\n\nexport type CSSMap = Dict<{ value: string; var: string; varRef: string }>;\n\nexport type WithCSSVar<T> = T & {\n  __cssVars: Dict;\n  __cssMap: CSSMap;\n};\n\nexport type DeepPartials<T> = {\n  [P in keyof T]?: DeepPartials<T[P]>;\n};\n\ntype _TupleOf<T, N extends number, R extends unknown[]> = R['length'] extends N ? R : _TupleOf<T, N, [T, ...R]>;\n\ntype Tuple<T, N extends number> = N extends N ? (number extends N ? T[] : _TupleOf<T, N, []>) : never;\n"],"mappings":""}