{"version":3,"file":"index.js","names":["isObject","omit","object","keys","result","Object","forEach","key","includes","pick","deepMerge","target","source","options","clone","output","_extends"],"sources":["../../../src/object/index.ts"],"sourcesContent":["import { Dict, isObject } from '../index';\n\n/**\n * The `omit` function in TypeScript allows you to create a new object that excludes specified keys\n * from an existing object.\n * @param {T} object - The `object` parameter is an object of type `T`, where `T` is a generic type\n * that extends `Dict`. `Dict` is a type that represents a dictionary object with string keys and any\n * value.\n * @param {K[]} keys - An array of keys that you want to omit from the object.\n * @returns an object that is the same type as the input object, but with the specified keys omitted.\n */\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {};\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return;\n    result[key] = object[key];\n  });\n  return result as Omit<T, K>;\n}\n\n/**\n * The `pick` function in TypeScript takes an object and an array of keys, and returns a new object\n * with only the specified keys from the original object.\n * @param {T} object - The `object` parameter is the object from which you want to pick specific keys\n * and their corresponding values.\n * @param {K[]} keys - An array of keys that you want to pick from the object.\n * @returns The `pick` function returns a new object that contains only the specified keys from the\n * original object. The returned object has the same type as the original object, but only includes the\n * selected keys and their corresponding values.\n */\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] };\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  });\n  return result;\n}\n\n/**\n * The `deepMerge` function merges two objects deeply, recursively merging nested objects if they\n * exist.\n * @param target - The `target` parameter is the object that will be merged with the `source` object.\n * It is of type `Partial<T1>`, which means it can be an object of any type `T1` or a partial object of\n * type `T1` (i.e., an object that\n * @param source - The `source` parameter is an object of type `Partial<T2>`, which means it is a\n * partial representation of an object of type `T2`. It contains properties and values that you want to\n * merge into the `target` object.\n * @param options - The `options` parameter is an optional object that can have a property called\n * `clone`. The `clone` property is a boolean value that determines whether the `target` object should\n * be cloned before merging. If `clone` is set to `true`, a shallow copy of the `target` object\n * @returns the merged object, which is the result of merging the `target` and `source` objects.\n */\nexport function deepMerge<T1, T2>(\n  target: Partial<T1>,\n  source: Partial<T2>,\n  options: { clone: boolean } = { clone: false },\n) {\n  const output = options.clone ? { ...target } : target;\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (key === '__proto__') return;\n\n      // @ts-ignore\n      if (isObject(source[key]) && key in target) {\n        // @ts-ignore\n        output[key] = deepMerge(target[key], source[key], options);\n      } else {\n        // @ts-ignore\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}\n"],"mappings":";AAAA,SAAeA,QAAQ,QAAQ,UAAU;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAAoCC,MAAS,EAAEC,IAAS,EAAE;EAC5E,IAAMC,MAAY,GAAG,CAAC,CAAC;EAEvBC,MAAM,CAACF,IAAI,CAACD,MAAM,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;IACnC,IAAIJ,IAAI,CAACK,QAAQ,CAACD,GAAQ,CAAC,EAAE;IAC7BH,MAAM,CAACG,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;EAC3B,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,IAAIA,CAAoCP,MAAS,EAAEC,IAAS,EAAE;EAC5E,IAAMC,MAAM,GAAG,CAAC,CAAuB;EAEvCD,IAAI,CAACG,OAAO,CAAEC,GAAG,IAAK;IACpB,IAAIA,GAAG,IAAIL,MAAM,EAAE;MACjBE,MAAM,CAACG,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;IAC3B;EACF,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,SAASA,CACvBC,MAAmB,EACnBC,MAAmB,EACnBC,OAA2B,EAC3B;EAAA,IADAA,OAA2B;IAA3BA,OAA2B,GAAG;MAAEC,KAAK,EAAE;IAAM,CAAC;EAAA;EAE9C,IAAMC,MAAM,GAAGF,OAAO,CAACC,KAAK,GAAAE,QAAA,KAAQL,MAAM,IAAKA,MAAM;EACrD,IAAIX,QAAQ,CAACW,MAAM,CAAC,IAAIX,QAAQ,CAACY,MAAM,CAAC,EAAE;IACxCP,MAAM,CAACF,IAAI,CAACS,MAAM,CAAC,CAACN,OAAO,CAAEC,GAAG,IAAK;MACnC,IAAIA,GAAG,KAAK,WAAW,EAAE;;MAEzB;MACA,IAAIP,QAAQ,CAACY,MAAM,CAACL,GAAG,CAAC,CAAC,IAAIA,GAAG,IAAII,MAAM,EAAE;QAC1C;QACAI,MAAM,CAACR,GAAG,CAAC,GAAGG,SAAS,CAACC,MAAM,CAACJ,GAAG,CAAC,EAAEK,MAAM,CAACL,GAAG,CAAC,EAAEM,OAAO,CAAC;MAC5D,CAAC,MAAM;QACL;QACAE,MAAM,CAACR,GAAG,CAAC,GAAGK,MAAM,CAACL,GAAG,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ;EACA,OAAOQ,MAAM;AACf"}