{"version":3,"file":"index.js","names":["isArray","value","Array","isObject","type","isBoolean","isNumber","isString","isFunction","isInputEvent","target","__DEV__","process","env","NODE_ENV"],"sources":["../../../src/assertion/index.ts"],"sourcesContent":["import { Dict } from \"../index\";\n\n/**\n * The function checks if a value is an array.\n * @param {any} value - The `value` parameter is the variable that you want to check if it is an array.\n * @returns a boolean value.\n */\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value);\n}\n\n/**\n * The function checks if a value is an object (excluding arrays).\n * @param {any} value - The parameter \"value\" is of type \"any\", which means it can accept any value.\n * @returns a boolean value.\n */\nexport function isObject(value: any): value is Dict {\n  const type = typeof value;\n  return value != null && (type === 'object' || type === 'function') && !isArray(value);\n}\n\n/**\n * The function `isBoolean` checks if a value is of type boolean.\n * @param {unknown} value - The `value` parameter is of type `unknown`, which means it can be any type.\n * @returns a boolean value.\n */\nexport function isBoolean(value: unknown): value is boolean {\n  return typeof value === 'boolean';\n}\n\n/**\n * The function checks if a value is a number.\n * @param {unknown} value - The `value` parameter is of type `unknown`, which means it can be any type.\n * @returns a boolean value.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\n/**\n * The function `isString` checks if a value is of type string.\n * @param {unknown} value - The parameter \"value\" is of type \"unknown\", which means it can be any type.\n * @returns a boolean value.\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\n/**\n * The function checks if a value is a function.\n * @param {unknown} value - The `value` parameter is of type `unknown`, which means it can be any type.\n * @returns a boolean value indicating whether the input value is a function or not.\n */\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === 'function';\n}\n\n/**\n * The function checks if a value is an input event object with a target property of type\n * HTMLInputElement.\n * @param {any} value - The `value` parameter is of type `any`, which means it can accept any value.\n * @returns a boolean value.\n */\nexport function isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target);\n}\n\nexport const __DEV__ = process.env.NODE_ENV !== 'production';\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAOA,CAAIC,KAAU,EAAqB;EACxD,OAAOC,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,QAAQA,CAACF,KAAU,EAAiB;EAClD,IAAMG,IAAI,GAAG,OAAOH,KAAK;EACzB,OAAOA,KAAK,IAAI,IAAI,KAAKG,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,CAAC,IAAI,CAACJ,OAAO,CAACC,KAAK,CAAC;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,SAASA,CAACJ,KAAc,EAAoB;EAC1D,OAAO,OAAOA,KAAK,KAAK,SAAS;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,QAAQA,CAACL,KAAc,EAAmB;EACxD,OAAO,OAAOA,KAAK,KAAK,QAAQ;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,QAAQA,CAACN,KAAc,EAAmB;EACxD,OAAO,OAAOA,KAAK,KAAK,QAAQ;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,UAAUA,CAACP,KAAc,EAAqB;EAC5D,OAAO,OAAOA,KAAK,KAAK,UAAU;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,YAAYA,CAACR,KAAU,EAAyC;EAC9E,OAAOA,KAAK,IAAIE,QAAQ,CAACF,KAAK,CAAC,IAAIE,QAAQ,CAACF,KAAK,CAACS,MAAM,CAAC;AAC3D;AAEA,OAAO,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY"}