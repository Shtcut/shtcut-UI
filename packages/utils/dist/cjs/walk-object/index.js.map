{"version":3,"file":"index.js","names":["_index","require","walkObject","target","predicate","inner","value","path","isArray","map","item","idx","concat","String","isObject","Object","fromEntries","entries","_ref","key","child"],"sources":["../../../src/walk-object/index.ts"],"sourcesContent":["import { isArray, isObject } from '../index';\n\nexport type WalkObjectPredicate<L = unknown> = (value: unknown, path: string[]) => L;\n\nexport type MappedLeavesObject<Obj, LeafType> = {\n  [Prop in keyof Obj]: Obj[Prop] extends Array<any>\n    ? MappedLeavesObject<Obj[Prop][number], LeafType>[]\n    : Obj[Prop] extends object\n    ? MappedLeavesObject<Obj[Prop], LeafType>\n    : LeafType;\n};\n\n/**\n * The `walkObject` function recursively walks through an object and applies a predicate function to\n * each leaf node, returning a new object with the same structure but with the leaf values transformed\n * according to the predicate.\n * @param {Target} target - The `target` parameter is the object that you want to walk through and\n * apply the `predicate` function to its leaf values.\n * @param predicate - The `predicate` parameter is a function that takes two arguments: `value` and\n * `path`.\n * @returns The function `walkObject` returns a mapped object where the values of the original object\n * have been transformed based on the provided `predicate` function. The type of the returned object is\n * `MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>>`.\n */\nexport function walkObject<Target, LeafType>(\n  target: Target,\n  predicate: WalkObjectPredicate<LeafType>,\n): MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>> {\n  function inner(value: unknown, path: string[] = []): any {\n    if (isArray(value)) {\n      return value.map((item, idx) => inner(item, [...path, String(idx)]));\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(Object.entries(value).map(([key, child]) => [key, inner(child, [...path, key])]));\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CACxBC,MAAc,EACdC,SAAwC,EAC+B;EACvE,SAASC,KAAKA,CAACC,KAAc,EAAEC,IAAc,EAAY;IAAA,IAA1BA,IAAc;MAAdA,IAAc,GAAG,EAAE;IAAA;IAChD,IAAI,IAAAC,cAAO,EAACF,KAAK,CAAC,EAAE;MAClB,OAAOA,KAAK,CAACG,GAAG,CAAC,UAACC,IAAI,EAAEC,GAAG;QAAA,OAAKN,KAAK,CAACK,IAAI,KAAAE,MAAA,CAAML,IAAI,GAAEM,MAAM,CAACF,GAAG,CAAC,EAAC,CAAC;MAAA,EAAC;IACtE;IAEA,IAAI,IAAAG,eAAQ,EAACR,KAAK,CAAC,EAAE;MACnB,OAAOS,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACX,KAAK,CAAC,CAACG,GAAG,CAAC,UAAAS,IAAA;QAAA,IAAEC,GAAG,GAAAD,IAAA;UAAEE,KAAK,GAAAF,IAAA;QAAA,OAAM,CAACC,GAAG,EAAEd,KAAK,CAACe,KAAK,KAAAR,MAAA,CAAML,IAAI,GAAEY,GAAG,EAAC,CAAC,CAAC;MAAA,EAAC,CAAC;IAC7G;IACA,OAAOf,SAAS,CAACE,KAAK,EAAEC,IAAI,CAAC;EAC/B;EACA,OAAOF,KAAK,CAACF,MAAM,CAAC;AACtB"}