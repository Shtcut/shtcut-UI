{"version":3,"file":"index.js","names":["_assertion","require","runIfFn","exports","valueOrFun","_len","arguments","length","args","Array","_key","isFunction","apply"],"sources":["../../../src/function/index.ts"],"sourcesContent":["import { isFunction } from '../assertion';\n\nexport type MaybeFunction<T, Args extends unknown[] = []> = T | ((...args: Args) => T);\n\n/**\n * The `runIfFn` function takes a value or a function and executes the function with the provided\n * arguments if the input is a function, otherwise it returns the input value.\n * @param {T | ((...args: U[]) => T)} valueOrFun - The `valueOrFun` parameter can be either a value of\n * type `T` or a function that takes `U` arguments and returns a value of type `T`.\n * @param {U[]} args - The `args` parameter is a rest parameter that allows you to pass in an arbitrary\n * number of arguments of type `U`. These arguments will be used when invoking the function\n * `valueOrFun` if it is a function.\n * @returns The function `runIfFn` returns the result of executing the `valueOrFun` function if it is a\n * function, otherwise it returns the `valueOrFun` itself.\n */\nexport const runIfFn = <T, U>(valueOrFun: T | ((...args: U[]) => T), ...args: U[]): T => {\n  return isFunction(valueOrFun) ? valueOrFun(...args) : valueOrFun;\n};\n"],"mappings":";;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,OAAO,GAAAC,OAAA,CAAAD,OAAA,GAAG,SAAVA,OAAOA,CAAUE,UAAqC,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC1E,OAAO,IAAAC,qBAAU,EAACP,UAAU,CAAC,GAAGA,UAAU,CAAAQ,KAAA,SAAIJ,IAAI,CAAC,GAAGJ,UAAU;AAClE,CAAC"}