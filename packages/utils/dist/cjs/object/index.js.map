{"version":3,"file":"index.js","names":["_index","require","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","omit","object","keys","result","forEach","includes","pick","deepMerge","options","clone","output","isObject","spilt","picked","omitted"],"sources":["../../../src/object/index.ts"],"sourcesContent":["import { Dict, isObject } from '../index';\n\n/**\n * The `omit` function in TypeScript allows you to create a new object that excludes specified keys\n * from an existing object.\n * @param {T} object - The `object` parameter is an object of type `T`, where `T` is a generic type\n * that extends `Dict`. `Dict` is a type that represents a dictionary object with string keys and any\n * value.\n * @param {K[]} keys - An array of keys that you want to omit from the object.\n * @returns an object that is the same type as the input object, but with the specified keys omitted.\n */\nexport function omit<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result: Dict = {};\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as K)) return;\n    result[key] = object[key];\n  });\n  return result as Omit<T, K>;\n}\n\n/**\n * The `pick` function in TypeScript takes an object and an array of keys, and returns a new object\n * with only the specified keys from the original object.\n * @param {T} object - The `object` parameter is the object from which you want to pick specific keys\n * and their corresponding values.\n * @param {K[]} keys - An array of keys that you want to pick from the object.\n * @returns The `pick` function returns a new object that contains only the specified keys from the\n * original object. The returned object has the same type as the original object, but only includes the\n * selected keys and their corresponding values.\n */\nexport function pick<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const result = {} as { [P in K]: T[P] };\n\n  keys.forEach((key) => {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  });\n  return result;\n}\n\n/**\n * The `deepMerge` function merges two objects deeply, recursively merging nested objects if they\n * exist.\n * @param target - The `target` parameter is the object that will be merged with the `source` object.\n * It is of type `Partial<T1>`, which means it can be an object of any type `T1` or a partial object of\n * type `T1` (i.e., an object that\n * @param source - The `source` parameter is an object of type `Partial<T2>`, which means it is a\n * partial representation of an object of type `T2`. It contains properties and values that you want to\n * merge into the `target` object.\n * @param options - The `options` parameter is an optional object that can have a property called\n * `clone`. The `clone` property is a boolean value that determines whether the `target` object should\n * be cloned before merging. If `clone` is set to `true`, a shallow copy of the `target` object\n * @returns the merged object, which is the result of merging the `target` and `source` objects.\n */\nexport function deepMerge<T1, T2>(\n  target: Partial<T1>,\n  source: Partial<T2>,\n  options: { clone: boolean } = { clone: false },\n) {\n  const output = options.clone ? { ...target } : target;\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (key === '__proto__') return;\n\n      // @ts-ignore\n      if (isObject(source[key]) && key in target) {\n        // @ts-ignore\n        output[key] = deepMerge(target[key], source[key], options);\n      } else {\n        // @ts-ignore\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}\n\n/**\n * The `split` function takes an object and an array of keys, and returns two new objects - one\n * containing the picked keys and their corresponding values, and the other containing the omitted keys\n * and their corresponding values.\n * @param {T} object - The `object` parameter is an object of type `T`, where `T` is a generic type\n * that extends `Dict`. `Dict` is a type that represents a dictionary object with string keys and any\n * value.\n * @param {K[]} keys - The `keys` parameter is an array of keys that you want to pick from the `object`\n * parameter. These keys should be present in the `object` parameter.\n * @returns an array with two elements. The first element is an object that contains the properties\n * specified in the `keys` parameter, with their corresponding values from the `object` parameter. The\n * second element is an object that contains the remaining properties from the `object` parameter,\n * excluding the ones specified in the `keys` parameter.\n */\nexport function spilt<T extends Dict, K extends keyof T>(object: T, keys: K[]) {\n  const picked: Dict = {};\n  const omitted: Dict = {};\n\n  Object.keys(object).forEach((key) => {\n    if (keys.includes(key as T[K])) {\n      picked[key] = object[key];\n    } else {\n      omitted[key] = object[key];\n    }\n  });\n  return [picked, omitted] as [{ [P in K]: T[P] }, Omit<T, K>];\n}\n"],"mappings":"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"}